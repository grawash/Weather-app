(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(667),s=t.n(c),d=new URL(t(344),t.b),A=i()(o());A.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap);"]);var l=s()(d);A.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n}\nbody{\n    padding: 0;\n    margin: 0;\n    height: 100vh;\n    background-image: url("+l+');\n}\n.container{\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-rows:2fr 12fr 1fr;\n    grid-template-columns: 2fr 3fr;\n}\n.header{\n    background-color: skyblue;\n    grid-column: span 2;\n    display: flex;\n    padding: 1rem 1rem;\n}\n.logo{\n    display: flex;\n    align-items:center;\n    flex-grow: 1;\n}\n.form{\n    display: flex;\n    align-items:center;\n    flex-grow: 2;\n}\n.logoHeader{\n    font-size: 4rem;\n    color: white;\n}\ninput[type="search"]{\n    border-radius: 30px;\n    font-size: 1rem;\n    border: none;\n    height: 3rem;\n    width: 60%;\n    padding: 0 20px;\n    font-size: 1rem;\n}\nbutton{\n    margin-left: 1rem;\n    background-color: white;\n    border: none;\n    height: 3rem;\n    width: 6rem;\n    font-size: 1rem;\n    border-radius: 25px;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.479);\n}\nbutton:hover{\n    cursor: pointer;\n    background-color: rgb(218, 216, 216);\n}\n.weatherInfo{\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-repeat: no-repeat;\n    background-size: 10px 10px;\n    color: white;\n    box-shadow:2px 0px 5px rgba(0, 0, 0, 0.274);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 3rem;\n    padding:2rem;\n}\n.forecast{\n    margin-top: auto;\n    padding: 1rem;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    font-size: 1rem;\n}\n.forecastList{\n    display: flex;\n    font-size: 1rem;\n    justify-content: space-around;\n    padding-top: 1rem;\n}\n.forecastCard{\n    display: flex;\n    flex-direction: column;\n    background-color: rgba(255, 255, 255, 0.164);\n    border-radius: 25px;\n    padding: 0.5rem;\n}\n.footer{\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 3;\n    grid-row-end: 3;\n    background-color: rgb(24, 24, 24);\n    display: flex;\n    color: white;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.5rem;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AACA;IACI,SAAS;IACT,UAAU;IACV,iCAAiC;AACrC;AACA;IACI,UAAU;IACV,SAAS;IACT,aAAa;IACb,yDAA8D;AAClE;AACA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,+BAA+B;IAC/B,8BAA8B;AAClC;AACA;IACI,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,eAAe;IACf,YAAY;AAChB;AACA;IACI,mBAAmB;IACnB,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,eAAe;IACf,eAAe;AACnB;AACA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,4CAA4C;AAChD;AACA;IACI,eAAe;IACf,oCAAoC;AACxC;AACA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,4BAA4B;IAC5B,0BAA0B;IAC1B,YAAY;IACZ,2CAA2C;IAC3C,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;IACf,YAAY;AAChB;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,eAAe;AACnB;AACA;IACI,aAAa;IACb,eAAe;IACf,6BAA6B;IAC7B,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,4CAA4C;IAC5C,mBAAmB;IACnB,eAAe;AACnB;AACA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,iCAAiC;IACjC,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;AACrB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n*{\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n}\nbody{\n    padding: 0;\n    margin: 0;\n    height: 100vh;\n    background-image: url('./img/pexels-brett-sayles-1431822.jpg');\n}\n.container{\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-rows:2fr 12fr 1fr;\n    grid-template-columns: 2fr 3fr;\n}\n.header{\n    background-color: skyblue;\n    grid-column: span 2;\n    display: flex;\n    padding: 1rem 1rem;\n}\n.logo{\n    display: flex;\n    align-items:center;\n    flex-grow: 1;\n}\n.form{\n    display: flex;\n    align-items:center;\n    flex-grow: 2;\n}\n.logoHeader{\n    font-size: 4rem;\n    color: white;\n}\ninput[type=\"search\"]{\n    border-radius: 30px;\n    font-size: 1rem;\n    border: none;\n    height: 3rem;\n    width: 60%;\n    padding: 0 20px;\n    font-size: 1rem;\n}\nbutton{\n    margin-left: 1rem;\n    background-color: white;\n    border: none;\n    height: 3rem;\n    width: 6rem;\n    font-size: 1rem;\n    border-radius: 25px;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.479);\n}\nbutton:hover{\n    cursor: pointer;\n    background-color: rgb(218, 216, 216);\n}\n.weatherInfo{\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-repeat: no-repeat;\n    background-size: 10px 10px;\n    color: white;\n    box-shadow:2px 0px 5px rgba(0, 0, 0, 0.274);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 3rem;\n    padding:2rem;\n}\n.forecast{\n    margin-top: auto;\n    padding: 1rem;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    font-size: 1rem;\n}\n.forecastList{\n    display: flex;\n    font-size: 1rem;\n    justify-content: space-around;\n    padding-top: 1rem;\n}\n.forecastCard{\n    display: flex;\n    flex-direction: column;\n    background-color: rgba(255, 255, 255, 0.164);\n    border-radius: 25px;\n    padding: 0.5rem;\n}\n.footer{\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 3;\n    grid-row-end: 3;\n    background-color: rgb(24, 24, 24);\n    display: flex;\n    color: white;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.5rem;\n}"],sourceRoot:""}]);const p=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var A=[].concat(e[d]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],A=a[d]||0,l="".concat(d," ").concat(A);a[d]=A+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var A=t(a[d]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},344:(e,n,t)=>{e.exports=t.p+"7823f772caf791f8eb73.jpg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),d=t(216),A=t.n(d),l=t(589),p=t.n(l),u=t(28),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),n()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals,document.querySelector("body");const f=t.p+"67aee4797a00453e66b4.svg",C=t.p+"5b9df7db60b0684bb28e.jpg",g=t.p+"99fadf6860e185d4175a.jpg",h=t.p+"2869aa9b0b1493822b16.jpg",b=t.p+"0ce02ede09a3230f1ddf.jpg",I=document.querySelector("body");function y(e){const n=document.createElement("div");n.classList.add("weatherInfo");const t=document.createElement("img"),r=document.createElement("p"),o=document.createElement("p"),a=document.createElement("p"),i=document.createElement("h1");(async function(){const e=document.querySelector("input[type='search']"),n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e.value}&appid=6dcb1bd02e3e18c8a7041a712632e232&units=metric`,{mode:"cors"}),t=await n.json();return console.log(t),t})().then((e=>{var n;i.textContent=e.name,r.textContent=e.weather[0].description,o.textContent="temp: "+parseInt(e.main.temp)+"°",a.textContent="feels like: "+parseInt(e.main.feels_like)+"°","Rain"===(n=e.weather[0].main)?I.style.background=`url(${g})`:"Clouds"===n?I.style.background=`url(${C})`:"Clear"===n?I.style.background=`url(${h})`:"Misty"===n&&(I.style.background=`url(${b})`),I.style.backgroundSize="cover",t.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`})),n.appendChild(t),n.appendChild(i),n.appendChild(r),n.appendChild(o),n.appendChild(a),e.appendChild(n)}function B(e){const n=document.createElement("div");n.classList.add("forecast");const t=document.createElement("h1");t.textContent="Daily forecast:";const r=document.createElement("div");r.classList.add("forecastList"),async function(){const e=document.querySelector("input[type='search']"),n=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e.value}&appid=6dcb1bd02e3e18c8a7041a712632e232&units=metric`,{mode:"cors"}),t=await n.json();return console.log(t),t}().then((e=>{const n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];let t=new Date(1e3*e.list[0].dt);e.list.forEach((e=>{let o=new Date(1e3*e.dt);if(o.getDay()!=t.getDay()){const a=document.createElement("div"),i=document.createElement("img"),c=document.createElement("p"),s=document.createElement("p"),d=document.createElement("p");a.classList.add("forecastCard"),i.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,c.textContent=n[o.getDay()],s.textContent=e.weather[0].description,d.textContent=parseInt(e.main.temp)+"°",r.appendChild(a),a.appendChild(i),a.appendChild(s),a.appendChild(c),a.appendChild(d),console.log(e.dt_txt),t=o}}))})),n.appendChild(t),n.appendChild(r),e.appendChild(n)}!function(){const e=document.createElement("div");e.classList.add("container"),I.appendChild(e),function(e){const n=document.createElement("div");n.classList.add("header"),e.appendChild(n),function(e){const n=document.createElement("div");n.classList.add("logo");const t=document.createElement("img");t.src=f;const r=document.createElement("h1");r.textContent="Weather App",r.classList.add("logoHeader"),n.appendChild(t),n.appendChild(r),e.appendChild(n)}(n),function(e){const n=document.createElement("form");n.setAttribute("novalidate",!0);const t=document.createElement("input");t.type="search";const r=document.createElement("button");r.textContent="search",n.appendChild(t),n.appendChild(r),n.classList.add("form"),e.appendChild(n),n.addEventListener("submit",(e=>{const n=document.querySelector(".container");e.preventDefault(),function(e){const n=document.querySelector(".weatherInfo"),t=document.querySelector(".forecast");n&&(n.remove(),t.remove())}(),y(n),B(n)}))}(n)}(e),function(e){const n=document.createElement("div"),t=document.createElement("p");t.textContent="created by @grawash",n.classList.add("footer"),n.appendChild(t),e.appendChild(n)}(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,